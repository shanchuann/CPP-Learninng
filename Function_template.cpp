#define _CRT_SECURE_NO_WARNINGS
#include<iostream>

/*******************************************************************************************************************
* 函数模板（Function Template）
* 定义：函数模板是一种参数化的函数定义，它使用类型占位符（模板参数）来表示函数中的数据类型，允许编译器根据传入的实参类型
*      自动生成对应类型的函数实例，从而实现“一份代码，多种类型复用”，避免重复编写同逻辑不同类型的函数。
*
* 核心语法：
* template <模板参数列表>
* 返回值类型 函数名(参数列表) {
*     // 函数体（逻辑与类型无关）
* }
* 其中，模板参数列表格式：class/typename 类型参数1, class/typename 类型参数2, ...
* （class和typename在模板参数中含义相同，可互换使用）
*
* 关键特性：
* 1. 类型参数化：通过模板参数（如T、U）代替具体类型，使函数适用于多种数据类型（int、double、char等）。
* 2. 实例化：编译器在编译阶段根据实参类型自动生成具体类型的函数（称为模板实例），该过程对用户透明。
* 3. 灵活性：
*    - 可包含多个模板参数，支持不同类型的参数组合；
*    - 结合auto关键字（C++14及以上）可自动推导返回值类型，适应不同类型参数的运算结果。
* 4. 适用场景：适用于逻辑相同但操作数据类型不同的函数（如比较大小、交换值、排序等）。
*******************************************************************************************************************/

// 示例1：单一模板参数的函数模板（要求两个参数类型相同）
// 功能：比较两个同类型数据的最大值
template <class T>  // 声明模板参数T（T为类型占位符）
T Max(const T& a, const T& b) {  // 参数为const引用，避免拷贝且防止修改实参
    return (a > b) ? a : b;  // 假设类型T支持>运算符（基本类型均支持）
}

// 示例2：多模板参数的函数模板（支持两个不同类型的参数）
// 功能：比较两个不同类型数据的最大值，返回值类型自动推导
template <class T, class U>  // 声明两个模板参数T和U
auto Max(const T& a, const U& b) {  // auto自动推导返回值类型（取a和b中较大者的类型）
    return (a > b) ? a : b;  // 要求T和U类型支持>运算符，且结果可隐式转换
}

#if 0
int main() {
    using namespace std;
    cout << "----- 单一模板参数示例（同类型参数） -----" << endl;
    int x = 10, y = 20;
    double p = 10.5, q = 20.5;
    char c1 = 'A', c2 = 'B';  // 字符比较ASCII值（'A'=65, 'B'=66）

    cout << "Max of " << x << " and " << y << " is: " << Max(x, y) << endl;  // 实例化为Max<int>
    cout << "Max of " << p << " and " << q << " is: " << Max(p, q) << endl;  // 实例化为Max<double>
    cout << "Max of " << c1 << " and " << c2 << " is: " << Max(c1, c2) << endl;  // 实例化为Max<char>
    cout << endl;

    cout << "----- 多模板参数示例（不同类型参数） -----" << endl;
    int a = 10;
    double b = 20.5;
    cout << "Max of " << a << " and " << b << " is: " << Max(a, b) << endl;  // 实例化为Max<int, double>，返回double（20.5）

    double c = 5.5;
    int d = 10;
    cout << "Max of " << c << " and " << d << " is: " << Max(c, d) << endl;  // 实例化为Max<double, int>，返回int（10）

    return 0;
}
#endif // 0