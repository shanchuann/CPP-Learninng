#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<stdio.h>
/*******************************************************************************************************************
* 标准输入流
* C 标准输入
* 
* 标准输入流及对缓冲区的理解
* stdin是一个文件描述符（Linux）或句柄（Windows），它在 C 程序启动时就被默认分配好
* 在 Linux 中一切皆文件，stdin也相当于一个可读文件，它对应着键盘设备的输入。因为它不断地被输入，又不断地被读取，像流水一样，因此通常称作输入流
* stdin是一种行缓冲I/O。当在键盘上键入字符时，它们首先被存放在键盘设备自身的缓存中（属于键盘硬件设备的一部分）
* 只有输入换行符时，操作系统才会进行同步，将键盘缓存中的数据读入到stdin的输入缓冲区（存在于内存中）
* 所有从stdin读取数据的输入流，都是从内存中的输入缓冲区读入数据。当输入缓冲区为空时，函数将被阻塞
*
* 1. C语言中的输入输出函数
* 	1.1. printf()：输出函数，用于向标准输出设备（显示器）输出数据
*   1.2. scanf()：输入函数，按照特定格式从stdin读取输入。
*		char str[100];
*		int a;
*		scanf("%s %d", str, &a);    // 注意，传入的一定是变量的地址
*		1.2.1.对空白字符的处理：
*		1.2.2. 缓冲区开头：丢弃空白字符（包括空格、Tab、换行符），直到第一个非空白字符才认为是第一个数据的开始。
*		1.2.3. 缓冲区中间：开始读取第一个数据后，一旦遇到空白字符（非换行符）， 就认为读取完毕一次。
*			   遇到的空白字符残留在缓冲区，直到下一次被读取或刷新。例如输入字符串this is test，则会被认为是3个字符串。
*		1.2.4. 缓冲区末尾：按下回车键时，换行符\n残留在缓冲区。换行符之前的空格可以认为是中间的空白字符，处理同上。
*   1.3. gets():按下回车键时，从stdin读取一行。
*		char str[100];
*		gets(str);
*		1.3.1 对空白字符的处理：
* 		所有空格、Tab等空白字符均被读取，不忽略。
*		按下回车键时，缓冲区末尾的换行符被丢弃，字符串末尾没有换行符\n，缓冲区也没有残留的换行符\n。
*		注意，gets()不能指定读取上限，因此容易发生数组边界溢出，造成内存不安全。
*		C11 使用了gets_s()代替gets()，但有时编译器未必支持，因此总体来说不建议使用gets()函数来读取输入。
* 
*******************************************************************************************************************/
void io_C()
{
	// 1. C语言中的输入输出函数
	// 1.1. printf()：输出函数，用于向标准输出设备（显示器）输出数据
	// 1.2. scanf()：输入函数，按照特定格式从stdin读取输入。
	char str[100]; // 用于存放字符串
	int a;		   // 用于存放整数
	scanf("%s %d", str, &a); // 注意，传入是变量的地址,注意格式化字符串的格式 Hello 123
	printf("str = %s, a = %d\n", str, a); // 输出结果 str = Hello, a = 123
	getchar(); // 用于清除缓冲区中的换行符
	// 1.3. gets():按下回车键时，从stdin读取一行。
	char str1[100];
	gets_s(str);
	printf("str = %s\n", str);

}

int main()
{
	io_C();
	return 0;
}